package xcom_server.generated;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TCPpacket implements org.apache.thrift.TBase<TCPpacket, TCPpacket._Fields>, java.io.Serializable, Cloneable, Comparable<TCPpacket> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCPpacket");

  private static final org.apache.thrift.protocol.TField SRC_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("srcPort", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DES_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("desPort", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SEQ_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("seqNumber", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACK_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("ackNumber", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DATA_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("dataOffset", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CHECKSUM_FIELD_DESC = new org.apache.thrift.protocol.TField("checksum", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField URGENT_POINTER_FIELD_DESC = new org.apache.thrift.protocol.TField("urgentPointer", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField HEADER_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("headerLength", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MESSAGE_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("messageLength", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCPpacketStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCPpacketTupleSchemeFactory());
  }

  public String srcPort; // required
  public String desPort; // required
  public String seqNumber; // required
  public String ackNumber; // required
  public String dataOffset; // required
  public String window; // required
  public String checksum; // required
  public String urgentPointer; // required
  public String headerLength; // required
  public String messageLength; // required
  public String flags; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SRC_PORT((short)1, "srcPort"),
    DES_PORT((short)2, "desPort"),
    SEQ_NUMBER((short)3, "seqNumber"),
    ACK_NUMBER((short)4, "ackNumber"),
    DATA_OFFSET((short)5, "dataOffset"),
    WINDOW((short)6, "window"),
    CHECKSUM((short)7, "checksum"),
    URGENT_POINTER((short)8, "urgentPointer"),
    HEADER_LENGTH((short)9, "headerLength"),
    MESSAGE_LENGTH((short)10, "messageLength"),
    FLAGS((short)11, "flags");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SRC_PORT
          return SRC_PORT;
        case 2: // DES_PORT
          return DES_PORT;
        case 3: // SEQ_NUMBER
          return SEQ_NUMBER;
        case 4: // ACK_NUMBER
          return ACK_NUMBER;
        case 5: // DATA_OFFSET
          return DATA_OFFSET;
        case 6: // WINDOW
          return WINDOW;
        case 7: // CHECKSUM
          return CHECKSUM;
        case 8: // URGENT_POINTER
          return URGENT_POINTER;
        case 9: // HEADER_LENGTH
          return HEADER_LENGTH;
        case 10: // MESSAGE_LENGTH
          return MESSAGE_LENGTH;
        case 11: // FLAGS
          return FLAGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SRC_PORT, new org.apache.thrift.meta_data.FieldMetaData("srcPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DES_PORT, new org.apache.thrift.meta_data.FieldMetaData("desPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEQ_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("seqNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACK_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("ackNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("dataOffset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECKSUM, new org.apache.thrift.meta_data.FieldMetaData("checksum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URGENT_POINTER, new org.apache.thrift.meta_data.FieldMetaData("urgentPointer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HEADER_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("headerLength", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("messageLength", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCPpacket.class, metaDataMap);
  }

  public TCPpacket() {
  }

  public TCPpacket(
    String srcPort,
    String desPort,
    String seqNumber,
    String ackNumber,
    String dataOffset,
    String window,
    String checksum,
    String urgentPointer,
    String headerLength,
    String messageLength,
    String flags)
  {
    this();
    this.srcPort = srcPort;
    this.desPort = desPort;
    this.seqNumber = seqNumber;
    this.ackNumber = ackNumber;
    this.dataOffset = dataOffset;
    this.window = window;
    this.checksum = checksum;
    this.urgentPointer = urgentPointer;
    this.headerLength = headerLength;
    this.messageLength = messageLength;
    this.flags = flags;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCPpacket(TCPpacket other) {
    if (other.isSetSrcPort()) {
      this.srcPort = other.srcPort;
    }
    if (other.isSetDesPort()) {
      this.desPort = other.desPort;
    }
    if (other.isSetSeqNumber()) {
      this.seqNumber = other.seqNumber;
    }
    if (other.isSetAckNumber()) {
      this.ackNumber = other.ackNumber;
    }
    if (other.isSetDataOffset()) {
      this.dataOffset = other.dataOffset;
    }
    if (other.isSetWindow()) {
      this.window = other.window;
    }
    if (other.isSetChecksum()) {
      this.checksum = other.checksum;
    }
    if (other.isSetUrgentPointer()) {
      this.urgentPointer = other.urgentPointer;
    }
    if (other.isSetHeaderLength()) {
      this.headerLength = other.headerLength;
    }
    if (other.isSetMessageLength()) {
      this.messageLength = other.messageLength;
    }
    if (other.isSetFlags()) {
      this.flags = other.flags;
    }
  }

  public TCPpacket deepCopy() {
    return new TCPpacket(this);
  }

  @Override
  public void clear() {
    this.srcPort = null;
    this.desPort = null;
    this.seqNumber = null;
    this.ackNumber = null;
    this.dataOffset = null;
    this.window = null;
    this.checksum = null;
    this.urgentPointer = null;
    this.headerLength = null;
    this.messageLength = null;
    this.flags = null;
  }

  public String getSrcPort() {
    return this.srcPort;
  }

  public TCPpacket setSrcPort(String srcPort) {
    this.srcPort = srcPort;
    return this;
  }

  public void unsetSrcPort() {
    this.srcPort = null;
  }

  /** Returns true if field srcPort is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcPort() {
    return this.srcPort != null;
  }

  public void setSrcPortIsSet(boolean value) {
    if (!value) {
      this.srcPort = null;
    }
  }

  public String getDesPort() {
    return this.desPort;
  }

  public TCPpacket setDesPort(String desPort) {
    this.desPort = desPort;
    return this;
  }

  public void unsetDesPort() {
    this.desPort = null;
  }

  /** Returns true if field desPort is set (has been assigned a value) and false otherwise */
  public boolean isSetDesPort() {
    return this.desPort != null;
  }

  public void setDesPortIsSet(boolean value) {
    if (!value) {
      this.desPort = null;
    }
  }

  public String getSeqNumber() {
    return this.seqNumber;
  }

  public TCPpacket setSeqNumber(String seqNumber) {
    this.seqNumber = seqNumber;
    return this;
  }

  public void unsetSeqNumber() {
    this.seqNumber = null;
  }

  /** Returns true if field seqNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetSeqNumber() {
    return this.seqNumber != null;
  }

  public void setSeqNumberIsSet(boolean value) {
    if (!value) {
      this.seqNumber = null;
    }
  }

  public String getAckNumber() {
    return this.ackNumber;
  }

  public TCPpacket setAckNumber(String ackNumber) {
    this.ackNumber = ackNumber;
    return this;
  }

  public void unsetAckNumber() {
    this.ackNumber = null;
  }

  /** Returns true if field ackNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetAckNumber() {
    return this.ackNumber != null;
  }

  public void setAckNumberIsSet(boolean value) {
    if (!value) {
      this.ackNumber = null;
    }
  }

  public String getDataOffset() {
    return this.dataOffset;
  }

  public TCPpacket setDataOffset(String dataOffset) {
    this.dataOffset = dataOffset;
    return this;
  }

  public void unsetDataOffset() {
    this.dataOffset = null;
  }

  /** Returns true if field dataOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetDataOffset() {
    return this.dataOffset != null;
  }

  public void setDataOffsetIsSet(boolean value) {
    if (!value) {
      this.dataOffset = null;
    }
  }

  public String getWindow() {
    return this.window;
  }

  public TCPpacket setWindow(String window) {
    this.window = window;
    return this;
  }

  public void unsetWindow() {
    this.window = null;
  }

  /** Returns true if field window is set (has been assigned a value) and false otherwise */
  public boolean isSetWindow() {
    return this.window != null;
  }

  public void setWindowIsSet(boolean value) {
    if (!value) {
      this.window = null;
    }
  }

  public String getChecksum() {
    return this.checksum;
  }

  public TCPpacket setChecksum(String checksum) {
    this.checksum = checksum;
    return this;
  }

  public void unsetChecksum() {
    this.checksum = null;
  }

  /** Returns true if field checksum is set (has been assigned a value) and false otherwise */
  public boolean isSetChecksum() {
    return this.checksum != null;
  }

  public void setChecksumIsSet(boolean value) {
    if (!value) {
      this.checksum = null;
    }
  }

  public String getUrgentPointer() {
    return this.urgentPointer;
  }

  public TCPpacket setUrgentPointer(String urgentPointer) {
    this.urgentPointer = urgentPointer;
    return this;
  }

  public void unsetUrgentPointer() {
    this.urgentPointer = null;
  }

  /** Returns true if field urgentPointer is set (has been assigned a value) and false otherwise */
  public boolean isSetUrgentPointer() {
    return this.urgentPointer != null;
  }

  public void setUrgentPointerIsSet(boolean value) {
    if (!value) {
      this.urgentPointer = null;
    }
  }

  public String getHeaderLength() {
    return this.headerLength;
  }

  public TCPpacket setHeaderLength(String headerLength) {
    this.headerLength = headerLength;
    return this;
  }

  public void unsetHeaderLength() {
    this.headerLength = null;
  }

  /** Returns true if field headerLength is set (has been assigned a value) and false otherwise */
  public boolean isSetHeaderLength() {
    return this.headerLength != null;
  }

  public void setHeaderLengthIsSet(boolean value) {
    if (!value) {
      this.headerLength = null;
    }
  }

  public String getMessageLength() {
    return this.messageLength;
  }

  public TCPpacket setMessageLength(String messageLength) {
    this.messageLength = messageLength;
    return this;
  }

  public void unsetMessageLength() {
    this.messageLength = null;
  }

  /** Returns true if field messageLength is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageLength() {
    return this.messageLength != null;
  }

  public void setMessageLengthIsSet(boolean value) {
    if (!value) {
      this.messageLength = null;
    }
  }

  public String getFlags() {
    return this.flags;
  }

  public TCPpacket setFlags(String flags) {
    this.flags = flags;
    return this;
  }

  public void unsetFlags() {
    this.flags = null;
  }

  /** Returns true if field flags is set (has been assigned a value) and false otherwise */
  public boolean isSetFlags() {
    return this.flags != null;
  }

  public void setFlagsIsSet(boolean value) {
    if (!value) {
      this.flags = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SRC_PORT:
      if (value == null) {
        unsetSrcPort();
      } else {
        setSrcPort((String)value);
      }
      break;

    case DES_PORT:
      if (value == null) {
        unsetDesPort();
      } else {
        setDesPort((String)value);
      }
      break;

    case SEQ_NUMBER:
      if (value == null) {
        unsetSeqNumber();
      } else {
        setSeqNumber((String)value);
      }
      break;

    case ACK_NUMBER:
      if (value == null) {
        unsetAckNumber();
      } else {
        setAckNumber((String)value);
      }
      break;

    case DATA_OFFSET:
      if (value == null) {
        unsetDataOffset();
      } else {
        setDataOffset((String)value);
      }
      break;

    case WINDOW:
      if (value == null) {
        unsetWindow();
      } else {
        setWindow((String)value);
      }
      break;

    case CHECKSUM:
      if (value == null) {
        unsetChecksum();
      } else {
        setChecksum((String)value);
      }
      break;

    case URGENT_POINTER:
      if (value == null) {
        unsetUrgentPointer();
      } else {
        setUrgentPointer((String)value);
      }
      break;

    case HEADER_LENGTH:
      if (value == null) {
        unsetHeaderLength();
      } else {
        setHeaderLength((String)value);
      }
      break;

    case MESSAGE_LENGTH:
      if (value == null) {
        unsetMessageLength();
      } else {
        setMessageLength((String)value);
      }
      break;

    case FLAGS:
      if (value == null) {
        unsetFlags();
      } else {
        setFlags((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SRC_PORT:
      return getSrcPort();

    case DES_PORT:
      return getDesPort();

    case SEQ_NUMBER:
      return getSeqNumber();

    case ACK_NUMBER:
      return getAckNumber();

    case DATA_OFFSET:
      return getDataOffset();

    case WINDOW:
      return getWindow();

    case CHECKSUM:
      return getChecksum();

    case URGENT_POINTER:
      return getUrgentPointer();

    case HEADER_LENGTH:
      return getHeaderLength();

    case MESSAGE_LENGTH:
      return getMessageLength();

    case FLAGS:
      return getFlags();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SRC_PORT:
      return isSetSrcPort();
    case DES_PORT:
      return isSetDesPort();
    case SEQ_NUMBER:
      return isSetSeqNumber();
    case ACK_NUMBER:
      return isSetAckNumber();
    case DATA_OFFSET:
      return isSetDataOffset();
    case WINDOW:
      return isSetWindow();
    case CHECKSUM:
      return isSetChecksum();
    case URGENT_POINTER:
      return isSetUrgentPointer();
    case HEADER_LENGTH:
      return isSetHeaderLength();
    case MESSAGE_LENGTH:
      return isSetMessageLength();
    case FLAGS:
      return isSetFlags();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCPpacket)
      return this.equals((TCPpacket)that);
    return false;
  }

  public boolean equals(TCPpacket that) {
    if (that == null)
      return false;

    boolean this_present_srcPort = true && this.isSetSrcPort();
    boolean that_present_srcPort = true && that.isSetSrcPort();
    if (this_present_srcPort || that_present_srcPort) {
      if (!(this_present_srcPort && that_present_srcPort))
        return false;
      if (!this.srcPort.equals(that.srcPort))
        return false;
    }

    boolean this_present_desPort = true && this.isSetDesPort();
    boolean that_present_desPort = true && that.isSetDesPort();
    if (this_present_desPort || that_present_desPort) {
      if (!(this_present_desPort && that_present_desPort))
        return false;
      if (!this.desPort.equals(that.desPort))
        return false;
    }

    boolean this_present_seqNumber = true && this.isSetSeqNumber();
    boolean that_present_seqNumber = true && that.isSetSeqNumber();
    if (this_present_seqNumber || that_present_seqNumber) {
      if (!(this_present_seqNumber && that_present_seqNumber))
        return false;
      if (!this.seqNumber.equals(that.seqNumber))
        return false;
    }

    boolean this_present_ackNumber = true && this.isSetAckNumber();
    boolean that_present_ackNumber = true && that.isSetAckNumber();
    if (this_present_ackNumber || that_present_ackNumber) {
      if (!(this_present_ackNumber && that_present_ackNumber))
        return false;
      if (!this.ackNumber.equals(that.ackNumber))
        return false;
    }

    boolean this_present_dataOffset = true && this.isSetDataOffset();
    boolean that_present_dataOffset = true && that.isSetDataOffset();
    if (this_present_dataOffset || that_present_dataOffset) {
      if (!(this_present_dataOffset && that_present_dataOffset))
        return false;
      if (!this.dataOffset.equals(that.dataOffset))
        return false;
    }

    boolean this_present_window = true && this.isSetWindow();
    boolean that_present_window = true && that.isSetWindow();
    if (this_present_window || that_present_window) {
      if (!(this_present_window && that_present_window))
        return false;
      if (!this.window.equals(that.window))
        return false;
    }

    boolean this_present_checksum = true && this.isSetChecksum();
    boolean that_present_checksum = true && that.isSetChecksum();
    if (this_present_checksum || that_present_checksum) {
      if (!(this_present_checksum && that_present_checksum))
        return false;
      if (!this.checksum.equals(that.checksum))
        return false;
    }

    boolean this_present_urgentPointer = true && this.isSetUrgentPointer();
    boolean that_present_urgentPointer = true && that.isSetUrgentPointer();
    if (this_present_urgentPointer || that_present_urgentPointer) {
      if (!(this_present_urgentPointer && that_present_urgentPointer))
        return false;
      if (!this.urgentPointer.equals(that.urgentPointer))
        return false;
    }

    boolean this_present_headerLength = true && this.isSetHeaderLength();
    boolean that_present_headerLength = true && that.isSetHeaderLength();
    if (this_present_headerLength || that_present_headerLength) {
      if (!(this_present_headerLength && that_present_headerLength))
        return false;
      if (!this.headerLength.equals(that.headerLength))
        return false;
    }

    boolean this_present_messageLength = true && this.isSetMessageLength();
    boolean that_present_messageLength = true && that.isSetMessageLength();
    if (this_present_messageLength || that_present_messageLength) {
      if (!(this_present_messageLength && that_present_messageLength))
        return false;
      if (!this.messageLength.equals(that.messageLength))
        return false;
    }

    boolean this_present_flags = true && this.isSetFlags();
    boolean that_present_flags = true && that.isSetFlags();
    if (this_present_flags || that_present_flags) {
      if (!(this_present_flags && that_present_flags))
        return false;
      if (!this.flags.equals(that.flags))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TCPpacket other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSrcPort()).compareTo(other.isSetSrcPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcPort, other.srcPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesPort()).compareTo(other.isSetDesPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desPort, other.desPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeqNumber()).compareTo(other.isSetSeqNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeqNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seqNumber, other.seqNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAckNumber()).compareTo(other.isSetAckNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAckNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ackNumber, other.ackNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataOffset()).compareTo(other.isSetDataOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataOffset, other.dataOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWindow()).compareTo(other.isSetWindow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWindow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChecksum()).compareTo(other.isSetChecksum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChecksum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checksum, other.checksum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrgentPointer()).compareTo(other.isSetUrgentPointer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrgentPointer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.urgentPointer, other.urgentPointer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeaderLength()).compareTo(other.isSetHeaderLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeaderLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headerLength, other.headerLength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessageLength()).compareTo(other.isSetMessageLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageLength, other.messageLength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlags()).compareTo(other.isSetFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, other.flags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCPpacket(");
    boolean first = true;

    sb.append("srcPort:");
    if (this.srcPort == null) {
      sb.append("null");
    } else {
      sb.append(this.srcPort);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("desPort:");
    if (this.desPort == null) {
      sb.append("null");
    } else {
      sb.append(this.desPort);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("seqNumber:");
    if (this.seqNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.seqNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ackNumber:");
    if (this.ackNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.ackNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataOffset:");
    if (this.dataOffset == null) {
      sb.append("null");
    } else {
      sb.append(this.dataOffset);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("window:");
    if (this.window == null) {
      sb.append("null");
    } else {
      sb.append(this.window);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checksum:");
    if (this.checksum == null) {
      sb.append("null");
    } else {
      sb.append(this.checksum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("urgentPointer:");
    if (this.urgentPointer == null) {
      sb.append("null");
    } else {
      sb.append(this.urgentPointer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("headerLength:");
    if (this.headerLength == null) {
      sb.append("null");
    } else {
      sb.append(this.headerLength);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageLength:");
    if (this.messageLength == null) {
      sb.append("null");
    } else {
      sb.append(this.messageLength);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flags:");
    if (this.flags == null) {
      sb.append("null");
    } else {
      sb.append(this.flags);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCPpacketStandardSchemeFactory implements SchemeFactory {
    public TCPpacketStandardScheme getScheme() {
      return new TCPpacketStandardScheme();
    }
  }

  private static class TCPpacketStandardScheme extends StandardScheme<TCPpacket> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCPpacket struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SRC_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.srcPort = iprot.readString();
              struct.setSrcPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DES_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desPort = iprot.readString();
              struct.setDesPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEQ_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.seqNumber = iprot.readString();
              struct.setSeqNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACK_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ackNumber = iprot.readString();
              struct.setAckNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATA_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataOffset = iprot.readString();
              struct.setDataOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WINDOW
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.window = iprot.readString();
              struct.setWindowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CHECKSUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checksum = iprot.readString();
              struct.setChecksumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // URGENT_POINTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.urgentPointer = iprot.readString();
              struct.setUrgentPointerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HEADER_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.headerLength = iprot.readString();
              struct.setHeaderLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MESSAGE_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.messageLength = iprot.readString();
              struct.setMessageLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flags = iprot.readString();
              struct.setFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCPpacket struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.srcPort != null) {
        oprot.writeFieldBegin(SRC_PORT_FIELD_DESC);
        oprot.writeString(struct.srcPort);
        oprot.writeFieldEnd();
      }
      if (struct.desPort != null) {
        oprot.writeFieldBegin(DES_PORT_FIELD_DESC);
        oprot.writeString(struct.desPort);
        oprot.writeFieldEnd();
      }
      if (struct.seqNumber != null) {
        oprot.writeFieldBegin(SEQ_NUMBER_FIELD_DESC);
        oprot.writeString(struct.seqNumber);
        oprot.writeFieldEnd();
      }
      if (struct.ackNumber != null) {
        oprot.writeFieldBegin(ACK_NUMBER_FIELD_DESC);
        oprot.writeString(struct.ackNumber);
        oprot.writeFieldEnd();
      }
      if (struct.dataOffset != null) {
        oprot.writeFieldBegin(DATA_OFFSET_FIELD_DESC);
        oprot.writeString(struct.dataOffset);
        oprot.writeFieldEnd();
      }
      if (struct.window != null) {
        oprot.writeFieldBegin(WINDOW_FIELD_DESC);
        oprot.writeString(struct.window);
        oprot.writeFieldEnd();
      }
      if (struct.checksum != null) {
        oprot.writeFieldBegin(CHECKSUM_FIELD_DESC);
        oprot.writeString(struct.checksum);
        oprot.writeFieldEnd();
      }
      if (struct.urgentPointer != null) {
        oprot.writeFieldBegin(URGENT_POINTER_FIELD_DESC);
        oprot.writeString(struct.urgentPointer);
        oprot.writeFieldEnd();
      }
      if (struct.headerLength != null) {
        oprot.writeFieldBegin(HEADER_LENGTH_FIELD_DESC);
        oprot.writeString(struct.headerLength);
        oprot.writeFieldEnd();
      }
      if (struct.messageLength != null) {
        oprot.writeFieldBegin(MESSAGE_LENGTH_FIELD_DESC);
        oprot.writeString(struct.messageLength);
        oprot.writeFieldEnd();
      }
      if (struct.flags != null) {
        oprot.writeFieldBegin(FLAGS_FIELD_DESC);
        oprot.writeString(struct.flags);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCPpacketTupleSchemeFactory implements SchemeFactory {
    public TCPpacketTupleScheme getScheme() {
      return new TCPpacketTupleScheme();
    }
  }

  private static class TCPpacketTupleScheme extends TupleScheme<TCPpacket> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCPpacket struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSrcPort()) {
        optionals.set(0);
      }
      if (struct.isSetDesPort()) {
        optionals.set(1);
      }
      if (struct.isSetSeqNumber()) {
        optionals.set(2);
      }
      if (struct.isSetAckNumber()) {
        optionals.set(3);
      }
      if (struct.isSetDataOffset()) {
        optionals.set(4);
      }
      if (struct.isSetWindow()) {
        optionals.set(5);
      }
      if (struct.isSetChecksum()) {
        optionals.set(6);
      }
      if (struct.isSetUrgentPointer()) {
        optionals.set(7);
      }
      if (struct.isSetHeaderLength()) {
        optionals.set(8);
      }
      if (struct.isSetMessageLength()) {
        optionals.set(9);
      }
      if (struct.isSetFlags()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetSrcPort()) {
        oprot.writeString(struct.srcPort);
      }
      if (struct.isSetDesPort()) {
        oprot.writeString(struct.desPort);
      }
      if (struct.isSetSeqNumber()) {
        oprot.writeString(struct.seqNumber);
      }
      if (struct.isSetAckNumber()) {
        oprot.writeString(struct.ackNumber);
      }
      if (struct.isSetDataOffset()) {
        oprot.writeString(struct.dataOffset);
      }
      if (struct.isSetWindow()) {
        oprot.writeString(struct.window);
      }
      if (struct.isSetChecksum()) {
        oprot.writeString(struct.checksum);
      }
      if (struct.isSetUrgentPointer()) {
        oprot.writeString(struct.urgentPointer);
      }
      if (struct.isSetHeaderLength()) {
        oprot.writeString(struct.headerLength);
      }
      if (struct.isSetMessageLength()) {
        oprot.writeString(struct.messageLength);
      }
      if (struct.isSetFlags()) {
        oprot.writeString(struct.flags);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCPpacket struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.srcPort = iprot.readString();
        struct.setSrcPortIsSet(true);
      }
      if (incoming.get(1)) {
        struct.desPort = iprot.readString();
        struct.setDesPortIsSet(true);
      }
      if (incoming.get(2)) {
        struct.seqNumber = iprot.readString();
        struct.setSeqNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ackNumber = iprot.readString();
        struct.setAckNumberIsSet(true);
      }
      if (incoming.get(4)) {
        struct.dataOffset = iprot.readString();
        struct.setDataOffsetIsSet(true);
      }
      if (incoming.get(5)) {
        struct.window = iprot.readString();
        struct.setWindowIsSet(true);
      }
      if (incoming.get(6)) {
        struct.checksum = iprot.readString();
        struct.setChecksumIsSet(true);
      }
      if (incoming.get(7)) {
        struct.urgentPointer = iprot.readString();
        struct.setUrgentPointerIsSet(true);
      }
      if (incoming.get(8)) {
        struct.headerLength = iprot.readString();
        struct.setHeaderLengthIsSet(true);
      }
      if (incoming.get(9)) {
        struct.messageLength = iprot.readString();
        struct.setMessageLengthIsSet(true);
      }
      if (incoming.get(10)) {
        struct.flags = iprot.readString();
        struct.setFlagsIsSet(true);
      }
    }
  }

}

