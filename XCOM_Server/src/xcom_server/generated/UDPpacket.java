package xcom_server.generated;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UDPpacket implements org.apache.thrift.TBase<UDPpacket, UDPpacket._Fields>, java.io.Serializable, Cloneable, Comparable<UDPpacket> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UDPpacket");

  private static final org.apache.thrift.protocol.TField SRC_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("srcPort", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DES_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("desPort", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LENGTH__HEADER_AND__DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("length_Header_and_Data", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CHECKSUM_FIELD_DESC = new org.apache.thrift.protocol.TField("checksum", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UDPpacketStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UDPpacketTupleSchemeFactory());
  }

  public String srcPort; // required
  public String desPort; // required
  public String length_Header_and_Data; // required
  public String checksum; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SRC_PORT((short)1, "srcPort"),
    DES_PORT((short)2, "desPort"),
    LENGTH__HEADER_AND__DATA((short)3, "length_Header_and_Data"),
    CHECKSUM((short)4, "checksum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SRC_PORT
          return SRC_PORT;
        case 2: // DES_PORT
          return DES_PORT;
        case 3: // LENGTH__HEADER_AND__DATA
          return LENGTH__HEADER_AND__DATA;
        case 4: // CHECKSUM
          return CHECKSUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SRC_PORT, new org.apache.thrift.meta_data.FieldMetaData("srcPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DES_PORT, new org.apache.thrift.meta_data.FieldMetaData("desPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LENGTH__HEADER_AND__DATA, new org.apache.thrift.meta_data.FieldMetaData("length_Header_and_Data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECKSUM, new org.apache.thrift.meta_data.FieldMetaData("checksum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UDPpacket.class, metaDataMap);
  }

  public UDPpacket() {
  }

  public UDPpacket(
    String srcPort,
    String desPort,
    String length_Header_and_Data,
    String checksum)
  {
    this();
    this.srcPort = srcPort;
    this.desPort = desPort;
    this.length_Header_and_Data = length_Header_and_Data;
    this.checksum = checksum;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UDPpacket(UDPpacket other) {
    if (other.isSetSrcPort()) {
      this.srcPort = other.srcPort;
    }
    if (other.isSetDesPort()) {
      this.desPort = other.desPort;
    }
    if (other.isSetLength_Header_and_Data()) {
      this.length_Header_and_Data = other.length_Header_and_Data;
    }
    if (other.isSetChecksum()) {
      this.checksum = other.checksum;
    }
  }

  public UDPpacket deepCopy() {
    return new UDPpacket(this);
  }

  @Override
  public void clear() {
    this.srcPort = null;
    this.desPort = null;
    this.length_Header_and_Data = null;
    this.checksum = null;
  }

  public String getSrcPort() {
    return this.srcPort;
  }

  public UDPpacket setSrcPort(String srcPort) {
    this.srcPort = srcPort;
    return this;
  }

  public void unsetSrcPort() {
    this.srcPort = null;
  }

  /** Returns true if field srcPort is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcPort() {
    return this.srcPort != null;
  }

  public void setSrcPortIsSet(boolean value) {
    if (!value) {
      this.srcPort = null;
    }
  }

  public String getDesPort() {
    return this.desPort;
  }

  public UDPpacket setDesPort(String desPort) {
    this.desPort = desPort;
    return this;
  }

  public void unsetDesPort() {
    this.desPort = null;
  }

  /** Returns true if field desPort is set (has been assigned a value) and false otherwise */
  public boolean isSetDesPort() {
    return this.desPort != null;
  }

  public void setDesPortIsSet(boolean value) {
    if (!value) {
      this.desPort = null;
    }
  }

  public String getLength_Header_and_Data() {
    return this.length_Header_and_Data;
  }

  public UDPpacket setLength_Header_and_Data(String length_Header_and_Data) {
    this.length_Header_and_Data = length_Header_and_Data;
    return this;
  }

  public void unsetLength_Header_and_Data() {
    this.length_Header_and_Data = null;
  }

  /** Returns true if field length_Header_and_Data is set (has been assigned a value) and false otherwise */
  public boolean isSetLength_Header_and_Data() {
    return this.length_Header_and_Data != null;
  }

  public void setLength_Header_and_DataIsSet(boolean value) {
    if (!value) {
      this.length_Header_and_Data = null;
    }
  }

  public String getChecksum() {
    return this.checksum;
  }

  public UDPpacket setChecksum(String checksum) {
    this.checksum = checksum;
    return this;
  }

  public void unsetChecksum() {
    this.checksum = null;
  }

  /** Returns true if field checksum is set (has been assigned a value) and false otherwise */
  public boolean isSetChecksum() {
    return this.checksum != null;
  }

  public void setChecksumIsSet(boolean value) {
    if (!value) {
      this.checksum = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SRC_PORT:
      if (value == null) {
        unsetSrcPort();
      } else {
        setSrcPort((String)value);
      }
      break;

    case DES_PORT:
      if (value == null) {
        unsetDesPort();
      } else {
        setDesPort((String)value);
      }
      break;

    case LENGTH__HEADER_AND__DATA:
      if (value == null) {
        unsetLength_Header_and_Data();
      } else {
        setLength_Header_and_Data((String)value);
      }
      break;

    case CHECKSUM:
      if (value == null) {
        unsetChecksum();
      } else {
        setChecksum((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SRC_PORT:
      return getSrcPort();

    case DES_PORT:
      return getDesPort();

    case LENGTH__HEADER_AND__DATA:
      return getLength_Header_and_Data();

    case CHECKSUM:
      return getChecksum();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SRC_PORT:
      return isSetSrcPort();
    case DES_PORT:
      return isSetDesPort();
    case LENGTH__HEADER_AND__DATA:
      return isSetLength_Header_and_Data();
    case CHECKSUM:
      return isSetChecksum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UDPpacket)
      return this.equals((UDPpacket)that);
    return false;
  }

  public boolean equals(UDPpacket that) {
    if (that == null)
      return false;

    boolean this_present_srcPort = true && this.isSetSrcPort();
    boolean that_present_srcPort = true && that.isSetSrcPort();
    if (this_present_srcPort || that_present_srcPort) {
      if (!(this_present_srcPort && that_present_srcPort))
        return false;
      if (!this.srcPort.equals(that.srcPort))
        return false;
    }

    boolean this_present_desPort = true && this.isSetDesPort();
    boolean that_present_desPort = true && that.isSetDesPort();
    if (this_present_desPort || that_present_desPort) {
      if (!(this_present_desPort && that_present_desPort))
        return false;
      if (!this.desPort.equals(that.desPort))
        return false;
    }

    boolean this_present_length_Header_and_Data = true && this.isSetLength_Header_and_Data();
    boolean that_present_length_Header_and_Data = true && that.isSetLength_Header_and_Data();
    if (this_present_length_Header_and_Data || that_present_length_Header_and_Data) {
      if (!(this_present_length_Header_and_Data && that_present_length_Header_and_Data))
        return false;
      if (!this.length_Header_and_Data.equals(that.length_Header_and_Data))
        return false;
    }

    boolean this_present_checksum = true && this.isSetChecksum();
    boolean that_present_checksum = true && that.isSetChecksum();
    if (this_present_checksum || that_present_checksum) {
      if (!(this_present_checksum && that_present_checksum))
        return false;
      if (!this.checksum.equals(that.checksum))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UDPpacket other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSrcPort()).compareTo(other.isSetSrcPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcPort, other.srcPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesPort()).compareTo(other.isSetDesPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desPort, other.desPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLength_Header_and_Data()).compareTo(other.isSetLength_Header_and_Data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength_Header_and_Data()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length_Header_and_Data, other.length_Header_and_Data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChecksum()).compareTo(other.isSetChecksum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChecksum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checksum, other.checksum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UDPpacket(");
    boolean first = true;

    sb.append("srcPort:");
    if (this.srcPort == null) {
      sb.append("null");
    } else {
      sb.append(this.srcPort);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("desPort:");
    if (this.desPort == null) {
      sb.append("null");
    } else {
      sb.append(this.desPort);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("length_Header_and_Data:");
    if (this.length_Header_and_Data == null) {
      sb.append("null");
    } else {
      sb.append(this.length_Header_and_Data);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checksum:");
    if (this.checksum == null) {
      sb.append("null");
    } else {
      sb.append(this.checksum);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UDPpacketStandardSchemeFactory implements SchemeFactory {
    public UDPpacketStandardScheme getScheme() {
      return new UDPpacketStandardScheme();
    }
  }

  private static class UDPpacketStandardScheme extends StandardScheme<UDPpacket> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UDPpacket struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SRC_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.srcPort = iprot.readString();
              struct.setSrcPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DES_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desPort = iprot.readString();
              struct.setDesPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LENGTH__HEADER_AND__DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.length_Header_and_Data = iprot.readString();
              struct.setLength_Header_and_DataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHECKSUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checksum = iprot.readString();
              struct.setChecksumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UDPpacket struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.srcPort != null) {
        oprot.writeFieldBegin(SRC_PORT_FIELD_DESC);
        oprot.writeString(struct.srcPort);
        oprot.writeFieldEnd();
      }
      if (struct.desPort != null) {
        oprot.writeFieldBegin(DES_PORT_FIELD_DESC);
        oprot.writeString(struct.desPort);
        oprot.writeFieldEnd();
      }
      if (struct.length_Header_and_Data != null) {
        oprot.writeFieldBegin(LENGTH__HEADER_AND__DATA_FIELD_DESC);
        oprot.writeString(struct.length_Header_and_Data);
        oprot.writeFieldEnd();
      }
      if (struct.checksum != null) {
        oprot.writeFieldBegin(CHECKSUM_FIELD_DESC);
        oprot.writeString(struct.checksum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UDPpacketTupleSchemeFactory implements SchemeFactory {
    public UDPpacketTupleScheme getScheme() {
      return new UDPpacketTupleScheme();
    }
  }

  private static class UDPpacketTupleScheme extends TupleScheme<UDPpacket> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UDPpacket struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSrcPort()) {
        optionals.set(0);
      }
      if (struct.isSetDesPort()) {
        optionals.set(1);
      }
      if (struct.isSetLength_Header_and_Data()) {
        optionals.set(2);
      }
      if (struct.isSetChecksum()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSrcPort()) {
        oprot.writeString(struct.srcPort);
      }
      if (struct.isSetDesPort()) {
        oprot.writeString(struct.desPort);
      }
      if (struct.isSetLength_Header_and_Data()) {
        oprot.writeString(struct.length_Header_and_Data);
      }
      if (struct.isSetChecksum()) {
        oprot.writeString(struct.checksum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UDPpacket struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.srcPort = iprot.readString();
        struct.setSrcPortIsSet(true);
      }
      if (incoming.get(1)) {
        struct.desPort = iprot.readString();
        struct.setDesPortIsSet(true);
      }
      if (incoming.get(2)) {
        struct.length_Header_and_Data = iprot.readString();
        struct.setLength_Header_and_DataIsSet(true);
      }
      if (incoming.get(3)) {
        struct.checksum = iprot.readString();
        struct.setChecksumIsSet(true);
      }
    }
  }

}

