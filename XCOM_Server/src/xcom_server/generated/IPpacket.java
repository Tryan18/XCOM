package xcom_server.generated;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class IPpacket implements org.apache.thrift.TBase<IPpacket, IPpacket._Fields>, java.io.Serializable, Cloneable, Comparable<IPpacket> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IPpacket");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TOS_FIELD_DESC = new org.apache.thrift.protocol.TField("tos", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("totalLength", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IDENTIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("identification", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FRAGMENTATION_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("fragmentationOffset", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TTL_FIELD_DESC = new org.apache.thrift.protocol.TField("ttl", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PROTOCOL_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SRC_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("srcIP", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DES_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("desIP", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField HEADER_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("headerLength", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField MESSAGE_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("messageLength", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IPpacketStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IPpacketTupleSchemeFactory());
  }

  public String version; // required
  public String tos; // required
  public String totalLength; // required
  public String identification; // required
  public String flags; // required
  public String fragmentationOffset; // required
  public String ttl; // required
  public String protocol; // required
  public String srcIP; // required
  public String desIP; // required
  public String headerLength; // required
  public String messageLength; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERSION((short)1, "version"),
    TOS((short)2, "tos"),
    TOTAL_LENGTH((short)3, "totalLength"),
    IDENTIFICATION((short)4, "identification"),
    FLAGS((short)5, "flags"),
    FRAGMENTATION_OFFSET((short)6, "fragmentationOffset"),
    TTL((short)7, "ttl"),
    PROTOCOL((short)8, "protocol"),
    SRC_IP((short)9, "srcIP"),
    DES_IP((short)10, "desIP"),
    HEADER_LENGTH((short)11, "headerLength"),
    MESSAGE_LENGTH((short)12, "messageLength");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // TOS
          return TOS;
        case 3: // TOTAL_LENGTH
          return TOTAL_LENGTH;
        case 4: // IDENTIFICATION
          return IDENTIFICATION;
        case 5: // FLAGS
          return FLAGS;
        case 6: // FRAGMENTATION_OFFSET
          return FRAGMENTATION_OFFSET;
        case 7: // TTL
          return TTL;
        case 8: // PROTOCOL
          return PROTOCOL;
        case 9: // SRC_IP
          return SRC_IP;
        case 10: // DES_IP
          return DES_IP;
        case 11: // HEADER_LENGTH
          return HEADER_LENGTH;
        case 12: // MESSAGE_LENGTH
          return MESSAGE_LENGTH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOS, new org.apache.thrift.meta_data.FieldMetaData("tos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("totalLength", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTIFICATION, new org.apache.thrift.meta_data.FieldMetaData("identification", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FRAGMENTATION_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("fragmentationOffset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TTL, new org.apache.thrift.meta_data.FieldMetaData("ttl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROTOCOL, new org.apache.thrift.meta_data.FieldMetaData("protocol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SRC_IP, new org.apache.thrift.meta_data.FieldMetaData("srcIP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DES_IP, new org.apache.thrift.meta_data.FieldMetaData("desIP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HEADER_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("headerLength", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("messageLength", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IPpacket.class, metaDataMap);
  }

  public IPpacket() {
  }

  public IPpacket(
    String version,
    String tos,
    String totalLength,
    String identification,
    String flags,
    String fragmentationOffset,
    String ttl,
    String protocol,
    String srcIP,
    String desIP,
    String headerLength,
    String messageLength)
  {
    this();
    this.version = version;
    this.tos = tos;
    this.totalLength = totalLength;
    this.identification = identification;
    this.flags = flags;
    this.fragmentationOffset = fragmentationOffset;
    this.ttl = ttl;
    this.protocol = protocol;
    this.srcIP = srcIP;
    this.desIP = desIP;
    this.headerLength = headerLength;
    this.messageLength = messageLength;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IPpacket(IPpacket other) {
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetTos()) {
      this.tos = other.tos;
    }
    if (other.isSetTotalLength()) {
      this.totalLength = other.totalLength;
    }
    if (other.isSetIdentification()) {
      this.identification = other.identification;
    }
    if (other.isSetFlags()) {
      this.flags = other.flags;
    }
    if (other.isSetFragmentationOffset()) {
      this.fragmentationOffset = other.fragmentationOffset;
    }
    if (other.isSetTtl()) {
      this.ttl = other.ttl;
    }
    if (other.isSetProtocol()) {
      this.protocol = other.protocol;
    }
    if (other.isSetSrcIP()) {
      this.srcIP = other.srcIP;
    }
    if (other.isSetDesIP()) {
      this.desIP = other.desIP;
    }
    if (other.isSetHeaderLength()) {
      this.headerLength = other.headerLength;
    }
    if (other.isSetMessageLength()) {
      this.messageLength = other.messageLength;
    }
  }

  public IPpacket deepCopy() {
    return new IPpacket(this);
  }

  @Override
  public void clear() {
    this.version = null;
    this.tos = null;
    this.totalLength = null;
    this.identification = null;
    this.flags = null;
    this.fragmentationOffset = null;
    this.ttl = null;
    this.protocol = null;
    this.srcIP = null;
    this.desIP = null;
    this.headerLength = null;
    this.messageLength = null;
  }

  public String getVersion() {
    return this.version;
  }

  public IPpacket setVersion(String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public String getTos() {
    return this.tos;
  }

  public IPpacket setTos(String tos) {
    this.tos = tos;
    return this;
  }

  public void unsetTos() {
    this.tos = null;
  }

  /** Returns true if field tos is set (has been assigned a value) and false otherwise */
  public boolean isSetTos() {
    return this.tos != null;
  }

  public void setTosIsSet(boolean value) {
    if (!value) {
      this.tos = null;
    }
  }

  public String getTotalLength() {
    return this.totalLength;
  }

  public IPpacket setTotalLength(String totalLength) {
    this.totalLength = totalLength;
    return this;
  }

  public void unsetTotalLength() {
    this.totalLength = null;
  }

  /** Returns true if field totalLength is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalLength() {
    return this.totalLength != null;
  }

  public void setTotalLengthIsSet(boolean value) {
    if (!value) {
      this.totalLength = null;
    }
  }

  public String getIdentification() {
    return this.identification;
  }

  public IPpacket setIdentification(String identification) {
    this.identification = identification;
    return this;
  }

  public void unsetIdentification() {
    this.identification = null;
  }

  /** Returns true if field identification is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentification() {
    return this.identification != null;
  }

  public void setIdentificationIsSet(boolean value) {
    if (!value) {
      this.identification = null;
    }
  }

  public String getFlags() {
    return this.flags;
  }

  public IPpacket setFlags(String flags) {
    this.flags = flags;
    return this;
  }

  public void unsetFlags() {
    this.flags = null;
  }

  /** Returns true if field flags is set (has been assigned a value) and false otherwise */
  public boolean isSetFlags() {
    return this.flags != null;
  }

  public void setFlagsIsSet(boolean value) {
    if (!value) {
      this.flags = null;
    }
  }

  public String getFragmentationOffset() {
    return this.fragmentationOffset;
  }

  public IPpacket setFragmentationOffset(String fragmentationOffset) {
    this.fragmentationOffset = fragmentationOffset;
    return this;
  }

  public void unsetFragmentationOffset() {
    this.fragmentationOffset = null;
  }

  /** Returns true if field fragmentationOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetFragmentationOffset() {
    return this.fragmentationOffset != null;
  }

  public void setFragmentationOffsetIsSet(boolean value) {
    if (!value) {
      this.fragmentationOffset = null;
    }
  }

  public String getTtl() {
    return this.ttl;
  }

  public IPpacket setTtl(String ttl) {
    this.ttl = ttl;
    return this;
  }

  public void unsetTtl() {
    this.ttl = null;
  }

  /** Returns true if field ttl is set (has been assigned a value) and false otherwise */
  public boolean isSetTtl() {
    return this.ttl != null;
  }

  public void setTtlIsSet(boolean value) {
    if (!value) {
      this.ttl = null;
    }
  }

  public String getProtocol() {
    return this.protocol;
  }

  public IPpacket setProtocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

  public void unsetProtocol() {
    this.protocol = null;
  }

  /** Returns true if field protocol is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocol() {
    return this.protocol != null;
  }

  public void setProtocolIsSet(boolean value) {
    if (!value) {
      this.protocol = null;
    }
  }

  public String getSrcIP() {
    return this.srcIP;
  }

  public IPpacket setSrcIP(String srcIP) {
    this.srcIP = srcIP;
    return this;
  }

  public void unsetSrcIP() {
    this.srcIP = null;
  }

  /** Returns true if field srcIP is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcIP() {
    return this.srcIP != null;
  }

  public void setSrcIPIsSet(boolean value) {
    if (!value) {
      this.srcIP = null;
    }
  }

  public String getDesIP() {
    return this.desIP;
  }

  public IPpacket setDesIP(String desIP) {
    this.desIP = desIP;
    return this;
  }

  public void unsetDesIP() {
    this.desIP = null;
  }

  /** Returns true if field desIP is set (has been assigned a value) and false otherwise */
  public boolean isSetDesIP() {
    return this.desIP != null;
  }

  public void setDesIPIsSet(boolean value) {
    if (!value) {
      this.desIP = null;
    }
  }

  public String getHeaderLength() {
    return this.headerLength;
  }

  public IPpacket setHeaderLength(String headerLength) {
    this.headerLength = headerLength;
    return this;
  }

  public void unsetHeaderLength() {
    this.headerLength = null;
  }

  /** Returns true if field headerLength is set (has been assigned a value) and false otherwise */
  public boolean isSetHeaderLength() {
    return this.headerLength != null;
  }

  public void setHeaderLengthIsSet(boolean value) {
    if (!value) {
      this.headerLength = null;
    }
  }

  public String getMessageLength() {
    return this.messageLength;
  }

  public IPpacket setMessageLength(String messageLength) {
    this.messageLength = messageLength;
    return this;
  }

  public void unsetMessageLength() {
    this.messageLength = null;
  }

  /** Returns true if field messageLength is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageLength() {
    return this.messageLength != null;
  }

  public void setMessageLengthIsSet(boolean value) {
    if (!value) {
      this.messageLength = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((String)value);
      }
      break;

    case TOS:
      if (value == null) {
        unsetTos();
      } else {
        setTos((String)value);
      }
      break;

    case TOTAL_LENGTH:
      if (value == null) {
        unsetTotalLength();
      } else {
        setTotalLength((String)value);
      }
      break;

    case IDENTIFICATION:
      if (value == null) {
        unsetIdentification();
      } else {
        setIdentification((String)value);
      }
      break;

    case FLAGS:
      if (value == null) {
        unsetFlags();
      } else {
        setFlags((String)value);
      }
      break;

    case FRAGMENTATION_OFFSET:
      if (value == null) {
        unsetFragmentationOffset();
      } else {
        setFragmentationOffset((String)value);
      }
      break;

    case TTL:
      if (value == null) {
        unsetTtl();
      } else {
        setTtl((String)value);
      }
      break;

    case PROTOCOL:
      if (value == null) {
        unsetProtocol();
      } else {
        setProtocol((String)value);
      }
      break;

    case SRC_IP:
      if (value == null) {
        unsetSrcIP();
      } else {
        setSrcIP((String)value);
      }
      break;

    case DES_IP:
      if (value == null) {
        unsetDesIP();
      } else {
        setDesIP((String)value);
      }
      break;

    case HEADER_LENGTH:
      if (value == null) {
        unsetHeaderLength();
      } else {
        setHeaderLength((String)value);
      }
      break;

    case MESSAGE_LENGTH:
      if (value == null) {
        unsetMessageLength();
      } else {
        setMessageLength((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return getVersion();

    case TOS:
      return getTos();

    case TOTAL_LENGTH:
      return getTotalLength();

    case IDENTIFICATION:
      return getIdentification();

    case FLAGS:
      return getFlags();

    case FRAGMENTATION_OFFSET:
      return getFragmentationOffset();

    case TTL:
      return getTtl();

    case PROTOCOL:
      return getProtocol();

    case SRC_IP:
      return getSrcIP();

    case DES_IP:
      return getDesIP();

    case HEADER_LENGTH:
      return getHeaderLength();

    case MESSAGE_LENGTH:
      return getMessageLength();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case TOS:
      return isSetTos();
    case TOTAL_LENGTH:
      return isSetTotalLength();
    case IDENTIFICATION:
      return isSetIdentification();
    case FLAGS:
      return isSetFlags();
    case FRAGMENTATION_OFFSET:
      return isSetFragmentationOffset();
    case TTL:
      return isSetTtl();
    case PROTOCOL:
      return isSetProtocol();
    case SRC_IP:
      return isSetSrcIP();
    case DES_IP:
      return isSetDesIP();
    case HEADER_LENGTH:
      return isSetHeaderLength();
    case MESSAGE_LENGTH:
      return isSetMessageLength();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IPpacket)
      return this.equals((IPpacket)that);
    return false;
  }

  public boolean equals(IPpacket that) {
    if (that == null)
      return false;

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_tos = true && this.isSetTos();
    boolean that_present_tos = true && that.isSetTos();
    if (this_present_tos || that_present_tos) {
      if (!(this_present_tos && that_present_tos))
        return false;
      if (!this.tos.equals(that.tos))
        return false;
    }

    boolean this_present_totalLength = true && this.isSetTotalLength();
    boolean that_present_totalLength = true && that.isSetTotalLength();
    if (this_present_totalLength || that_present_totalLength) {
      if (!(this_present_totalLength && that_present_totalLength))
        return false;
      if (!this.totalLength.equals(that.totalLength))
        return false;
    }

    boolean this_present_identification = true && this.isSetIdentification();
    boolean that_present_identification = true && that.isSetIdentification();
    if (this_present_identification || that_present_identification) {
      if (!(this_present_identification && that_present_identification))
        return false;
      if (!this.identification.equals(that.identification))
        return false;
    }

    boolean this_present_flags = true && this.isSetFlags();
    boolean that_present_flags = true && that.isSetFlags();
    if (this_present_flags || that_present_flags) {
      if (!(this_present_flags && that_present_flags))
        return false;
      if (!this.flags.equals(that.flags))
        return false;
    }

    boolean this_present_fragmentationOffset = true && this.isSetFragmentationOffset();
    boolean that_present_fragmentationOffset = true && that.isSetFragmentationOffset();
    if (this_present_fragmentationOffset || that_present_fragmentationOffset) {
      if (!(this_present_fragmentationOffset && that_present_fragmentationOffset))
        return false;
      if (!this.fragmentationOffset.equals(that.fragmentationOffset))
        return false;
    }

    boolean this_present_ttl = true && this.isSetTtl();
    boolean that_present_ttl = true && that.isSetTtl();
    if (this_present_ttl || that_present_ttl) {
      if (!(this_present_ttl && that_present_ttl))
        return false;
      if (!this.ttl.equals(that.ttl))
        return false;
    }

    boolean this_present_protocol = true && this.isSetProtocol();
    boolean that_present_protocol = true && that.isSetProtocol();
    if (this_present_protocol || that_present_protocol) {
      if (!(this_present_protocol && that_present_protocol))
        return false;
      if (!this.protocol.equals(that.protocol))
        return false;
    }

    boolean this_present_srcIP = true && this.isSetSrcIP();
    boolean that_present_srcIP = true && that.isSetSrcIP();
    if (this_present_srcIP || that_present_srcIP) {
      if (!(this_present_srcIP && that_present_srcIP))
        return false;
      if (!this.srcIP.equals(that.srcIP))
        return false;
    }

    boolean this_present_desIP = true && this.isSetDesIP();
    boolean that_present_desIP = true && that.isSetDesIP();
    if (this_present_desIP || that_present_desIP) {
      if (!(this_present_desIP && that_present_desIP))
        return false;
      if (!this.desIP.equals(that.desIP))
        return false;
    }

    boolean this_present_headerLength = true && this.isSetHeaderLength();
    boolean that_present_headerLength = true && that.isSetHeaderLength();
    if (this_present_headerLength || that_present_headerLength) {
      if (!(this_present_headerLength && that_present_headerLength))
        return false;
      if (!this.headerLength.equals(that.headerLength))
        return false;
    }

    boolean this_present_messageLength = true && this.isSetMessageLength();
    boolean that_present_messageLength = true && that.isSetMessageLength();
    if (this_present_messageLength || that_present_messageLength) {
      if (!(this_present_messageLength && that_present_messageLength))
        return false;
      if (!this.messageLength.equals(that.messageLength))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(IPpacket other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTos()).compareTo(other.isSetTos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tos, other.tos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalLength()).compareTo(other.isSetTotalLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalLength, other.totalLength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentification()).compareTo(other.isSetIdentification());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentification()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identification, other.identification);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlags()).compareTo(other.isSetFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, other.flags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFragmentationOffset()).compareTo(other.isSetFragmentationOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragmentationOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragmentationOffset, other.fragmentationOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTtl()).compareTo(other.isSetTtl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTtl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ttl, other.ttl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProtocol()).compareTo(other.isSetProtocol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol, other.protocol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrcIP()).compareTo(other.isSetSrcIP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcIP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcIP, other.srcIP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesIP()).compareTo(other.isSetDesIP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesIP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desIP, other.desIP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeaderLength()).compareTo(other.isSetHeaderLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeaderLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headerLength, other.headerLength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessageLength()).compareTo(other.isSetMessageLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageLength, other.messageLength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("IPpacket(");
    boolean first = true;

    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tos:");
    if (this.tos == null) {
      sb.append("null");
    } else {
      sb.append(this.tos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalLength:");
    if (this.totalLength == null) {
      sb.append("null");
    } else {
      sb.append(this.totalLength);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identification:");
    if (this.identification == null) {
      sb.append("null");
    } else {
      sb.append(this.identification);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flags:");
    if (this.flags == null) {
      sb.append("null");
    } else {
      sb.append(this.flags);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fragmentationOffset:");
    if (this.fragmentationOffset == null) {
      sb.append("null");
    } else {
      sb.append(this.fragmentationOffset);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ttl:");
    if (this.ttl == null) {
      sb.append("null");
    } else {
      sb.append(this.ttl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("protocol:");
    if (this.protocol == null) {
      sb.append("null");
    } else {
      sb.append(this.protocol);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("srcIP:");
    if (this.srcIP == null) {
      sb.append("null");
    } else {
      sb.append(this.srcIP);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("desIP:");
    if (this.desIP == null) {
      sb.append("null");
    } else {
      sb.append(this.desIP);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("headerLength:");
    if (this.headerLength == null) {
      sb.append("null");
    } else {
      sb.append(this.headerLength);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageLength:");
    if (this.messageLength == null) {
      sb.append("null");
    } else {
      sb.append(this.messageLength);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IPpacketStandardSchemeFactory implements SchemeFactory {
    public IPpacketStandardScheme getScheme() {
      return new IPpacketStandardScheme();
    }
  }

  private static class IPpacketStandardScheme extends StandardScheme<IPpacket> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IPpacket struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tos = iprot.readString();
              struct.setTosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.totalLength = iprot.readString();
              struct.setTotalLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IDENTIFICATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identification = iprot.readString();
              struct.setIdentificationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flags = iprot.readString();
              struct.setFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FRAGMENTATION_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fragmentationOffset = iprot.readString();
              struct.setFragmentationOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TTL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ttl = iprot.readString();
              struct.setTtlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PROTOCOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.protocol = iprot.readString();
              struct.setProtocolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SRC_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.srcIP = iprot.readString();
              struct.setSrcIPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DES_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desIP = iprot.readString();
              struct.setDesIPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HEADER_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.headerLength = iprot.readString();
              struct.setHeaderLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MESSAGE_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.messageLength = iprot.readString();
              struct.setMessageLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IPpacket struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeString(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.tos != null) {
        oprot.writeFieldBegin(TOS_FIELD_DESC);
        oprot.writeString(struct.tos);
        oprot.writeFieldEnd();
      }
      if (struct.totalLength != null) {
        oprot.writeFieldBegin(TOTAL_LENGTH_FIELD_DESC);
        oprot.writeString(struct.totalLength);
        oprot.writeFieldEnd();
      }
      if (struct.identification != null) {
        oprot.writeFieldBegin(IDENTIFICATION_FIELD_DESC);
        oprot.writeString(struct.identification);
        oprot.writeFieldEnd();
      }
      if (struct.flags != null) {
        oprot.writeFieldBegin(FLAGS_FIELD_DESC);
        oprot.writeString(struct.flags);
        oprot.writeFieldEnd();
      }
      if (struct.fragmentationOffset != null) {
        oprot.writeFieldBegin(FRAGMENTATION_OFFSET_FIELD_DESC);
        oprot.writeString(struct.fragmentationOffset);
        oprot.writeFieldEnd();
      }
      if (struct.ttl != null) {
        oprot.writeFieldBegin(TTL_FIELD_DESC);
        oprot.writeString(struct.ttl);
        oprot.writeFieldEnd();
      }
      if (struct.protocol != null) {
        oprot.writeFieldBegin(PROTOCOL_FIELD_DESC);
        oprot.writeString(struct.protocol);
        oprot.writeFieldEnd();
      }
      if (struct.srcIP != null) {
        oprot.writeFieldBegin(SRC_IP_FIELD_DESC);
        oprot.writeString(struct.srcIP);
        oprot.writeFieldEnd();
      }
      if (struct.desIP != null) {
        oprot.writeFieldBegin(DES_IP_FIELD_DESC);
        oprot.writeString(struct.desIP);
        oprot.writeFieldEnd();
      }
      if (struct.headerLength != null) {
        oprot.writeFieldBegin(HEADER_LENGTH_FIELD_DESC);
        oprot.writeString(struct.headerLength);
        oprot.writeFieldEnd();
      }
      if (struct.messageLength != null) {
        oprot.writeFieldBegin(MESSAGE_LENGTH_FIELD_DESC);
        oprot.writeString(struct.messageLength);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IPpacketTupleSchemeFactory implements SchemeFactory {
    public IPpacketTupleScheme getScheme() {
      return new IPpacketTupleScheme();
    }
  }

  private static class IPpacketTupleScheme extends TupleScheme<IPpacket> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IPpacket struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVersion()) {
        optionals.set(0);
      }
      if (struct.isSetTos()) {
        optionals.set(1);
      }
      if (struct.isSetTotalLength()) {
        optionals.set(2);
      }
      if (struct.isSetIdentification()) {
        optionals.set(3);
      }
      if (struct.isSetFlags()) {
        optionals.set(4);
      }
      if (struct.isSetFragmentationOffset()) {
        optionals.set(5);
      }
      if (struct.isSetTtl()) {
        optionals.set(6);
      }
      if (struct.isSetProtocol()) {
        optionals.set(7);
      }
      if (struct.isSetSrcIP()) {
        optionals.set(8);
      }
      if (struct.isSetDesIP()) {
        optionals.set(9);
      }
      if (struct.isSetHeaderLength()) {
        optionals.set(10);
      }
      if (struct.isSetMessageLength()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetVersion()) {
        oprot.writeString(struct.version);
      }
      if (struct.isSetTos()) {
        oprot.writeString(struct.tos);
      }
      if (struct.isSetTotalLength()) {
        oprot.writeString(struct.totalLength);
      }
      if (struct.isSetIdentification()) {
        oprot.writeString(struct.identification);
      }
      if (struct.isSetFlags()) {
        oprot.writeString(struct.flags);
      }
      if (struct.isSetFragmentationOffset()) {
        oprot.writeString(struct.fragmentationOffset);
      }
      if (struct.isSetTtl()) {
        oprot.writeString(struct.ttl);
      }
      if (struct.isSetProtocol()) {
        oprot.writeString(struct.protocol);
      }
      if (struct.isSetSrcIP()) {
        oprot.writeString(struct.srcIP);
      }
      if (struct.isSetDesIP()) {
        oprot.writeString(struct.desIP);
      }
      if (struct.isSetHeaderLength()) {
        oprot.writeString(struct.headerLength);
      }
      if (struct.isSetMessageLength()) {
        oprot.writeString(struct.messageLength);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IPpacket struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tos = iprot.readString();
        struct.setTosIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalLength = iprot.readString();
        struct.setTotalLengthIsSet(true);
      }
      if (incoming.get(3)) {
        struct.identification = iprot.readString();
        struct.setIdentificationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.flags = iprot.readString();
        struct.setFlagsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.fragmentationOffset = iprot.readString();
        struct.setFragmentationOffsetIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ttl = iprot.readString();
        struct.setTtlIsSet(true);
      }
      if (incoming.get(7)) {
        struct.protocol = iprot.readString();
        struct.setProtocolIsSet(true);
      }
      if (incoming.get(8)) {
        struct.srcIP = iprot.readString();
        struct.setSrcIPIsSet(true);
      }
      if (incoming.get(9)) {
        struct.desIP = iprot.readString();
        struct.setDesIPIsSet(true);
      }
      if (incoming.get(10)) {
        struct.headerLength = iprot.readString();
        struct.setHeaderLengthIsSet(true);
      }
      if (incoming.get(11)) {
        struct.messageLength = iprot.readString();
        struct.setMessageLengthIsSet(true);
      }
    }
  }

}

